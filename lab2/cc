void replace_multi_space_with_single_space(char *str)
{
    char *dest = str;  /* Destination to copy to */

    /* While we're not at the end of the string, loop... */
    while (*str != '\0')
    {
        /* Loop while the current character is a space, AND the next
         * character is a space
         */
        while (*str == ' ' && *(str + 1) == ' ')
            str++;  /* Just skip to next character */

       /* Copy from the "source" string to the "destination" string,
        * while advancing to the next character in both
        */
       *dest++ = *str++;
    }

    /* Make sure the string is properly terminated */    
    *dest = '\0';
}

// Discard blanks from a file////

#include <stdio.h>
#include <stdlib.h>

int main (int argc, const char * argv []) {

    char inname[128];
    printf("Enter input filename: ");
    scanf(" %s", inname);

    FILE *input = fopen(inname, "r");

    char outname[128];
    snprintf(outname, 128, "sr_%s", inname);

    FILE *output = fopen(outname, "w+");

    char ch;
    do {
        ch = getc(input); // Get character from input file.
        if (ch != ' ' && ch != '\n' && ch != '\r') {
            putc(ch, output); // Put if not a space, next line or return.
        }
    } while (ch != EOF);

    fclose(input);
    fclose(output);

    return 0;

}



///
// Discard new line and tabs

#include <stdio.h>
#include <stdlib.h>

int main (int argc, const char * argv []) {

    char inname[128];
    printf("Enter input filename: ");
    scanf(" %s", inname);

    FILE *input = fopen(inname, "r");

    char outname[128];
    snprintf(outname, 128, "tr_%s", inname);

    FILE *output = fopen(outname, "w+");

    char ch;
    do {
        ch = getc(input); // Get character from input file.
        if (ch != '\n' && ch != '\t') {
            putc(ch, output); // Put if not a space, next line or return.
        }
    } while (ch != EOF);

    fclose(input);
    fclose(output);

    return 0;

}



////////2222222222222//////

#include <stdio.h>
#include <stdlib.h>

int main (int argc, const char * argv []) {

    char inname[128];
    printf("Enter input filename: ");
    scanf(" %s", inname);

    FILE *input = fopen(inname, "r");

    char outname[128];
    snprintf(outname, 128, "pr_%s", inname);

    FILE *output = fopen(outname, "w+");

    char ch;
    do {
        ch = getc(input); // Get character from input file.
        if (ch == '#') { // If a #if found, loop till you find the next '\n'
            while (ch != '\n') { 
                ch = getc(input);
            }
            // ch = getc(input); // If you want to delete the line too
        }
        putc(ch, output);
    } while (ch != EOF);

    fclose(input);
    fclose(output);

    return 0;

}

///////

// Recognize keywords in 'C' program.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>

// List of tokens
const char *keywords[32] = {
    "auto",
    "double",
    "int",
    "struct",
    "break",
    "else",
    "long",
    "switch",
    "case",
    "enum",
    "register",
    "typedef",
    "char",
    "extern",
    "return",
    "union",
    "continue",
    "for",
    "signed",
    "void",
    "do",
    "if",
    "static",
    "while",
    "default",
    "goto",
    "sizeof",
    "volatile",
    "const",
    "float",
    "short",
    "unsigned"
};

// list of delimiters
const char delimiters[] = " .,;:!-()\n\t";

int isKeyword (char *word) {
    int i;
    for (i = 0; i < 32; ++i) {
        if (strcmp(word, keywords[i]) == 0) {
            return 1;
        }
    }
    return 0;
}

void printUpperCase (char *word) {
    int l = strlen(word);
    char z;
    int i;
    for (i = 0; i < l; ++i) {
        z = word[i];
        printf("%c", z > 96 ? z - 32 : z);
    }
    printf("\n");
}

int main (int argc, const char * argv []) {

    char inname[128];
    printf("Enter input filename: ");
    scanf(" %s", inname);

    FILE *input = fopen(inname, "r");

    char buffer[1024];
    int k;

    while (fgets(buffer, 1024, input) > 0) {

        // Make a temp copy of the string
        char *cp = (char *)malloc(1024 * sizeof(char));
        strcpy(cp, buffer);
            
        char *token = (char *)malloc(256 * sizeof(char));

        do {
            // strsep - extract token from string, returns null if token is not found.
            token = strsep(&cp, delimiters);
            if (token != NULL) {
                if (isKeyword(token)) {
                    printUpperCase(token);
                }
            }

        } while (token != NULL);
    }

    fclose(input);

    return 0;

}
////////add///////


#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int main() {

    char filename1[100], filename2[100], c1, c2;

    char *keywords[8] = {"double", "int", "long", "char", "float", "short", "unsigned", "void"};

    printf("Enter the first filename:\n> ");
    scanf("%s",filename1);
    FILE *fp1 = fopen(filename1, "r");

    if (fp1 == NULL) {
        printf("File cant be open %s\n", filename1);
        exit(0);
    }

    int i = 0, k = 0, j = 0;
    char return_type[50];
    char temp[50];

    // Recognize: "return_type function_name (" for successful parsing of function name.

    for (c1 = fgetc(fp1) ;c1 != EOF;c1 = fgetc(fp1)) {
        memset(return_type, '\0', sizeof(char)*50);
        memset(temp, '\0', sizeof(char)*50);
        k = 0;
        j = 0;
        while((c1 >= 'A' && c1 <= 'Z') || ( c1 >= 'a' && c1 <= 'z')) {
            return_type[j++] = c1;
            c1 = fgetc(fp1);
        }
        
        if(c1 == ' ') {
            
            int flag = 0;
            for (i = 0; i < 8; i++) {
                if (strcmp(return_type, keywords[i]) == 0) {
                    flag = 1;
                    break;
                }
            }
            if(flag == 1) {
        
                c1 = fgetc(fp1);
                while((c1 >= 'A' && c1 <= 'Z') || ( c1 >= 'a' && c1 <= 'z')) {
                    temp[k++] = c1;
                    c1 = fgetc(fp1);
                }
                while(c1 == ' ') {
                    c1 = fgetc(fp1);
                }

                if(c1 == '(') {
                    for(i = 0; i < k; i++) {
                        printf("%c", temp[i]);
                    } printf("\n");
                }

            }
        }
    }

    

    return 0;
}